SELECT * FROM customers 
SELECT * FROM geolocation
SELECT * FROM order_items 
SELECT * FROM orders 
SELECT * FROM payments
SELECT * FROM products 
SELECT * FROM sellers 


-- Basic Queries
-- 1. List all unique cities where customers are located.

SELECT DISTINCT customer_city
FROM customers 

-- 2. Count the number of orders placed in 2017. 

	
SELECT  COUNT(order_delivered_customer_date)	AS total_No_order_placed,
		year
FROM (
	SELECT EXTRACT( YEAR FROM order_delivered_customer_date::DATE) AS year, order_delivered_customer_date
	FROM orders 
	WHERE order_delivered_customer_date IS NOT NULL )
WHERE year = '2017'
GROUP BY year

-- ________________________________________________OR________________________________

SELECT COUNT(order_id)
FROM orders 
WHERE order_delivered_customer_date::TIMESTAMP BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 23:59:59';

-- _______________________________________________OR___________________________________

SELECT COUNT(order_id)
FROM orders
WHERE order_delivered_customer_date::DATE BETWEEN '2017-01-01' AND '2017-12-31';

-- 3. Find the total sales per category.

SELECT  
	p."product category", 
	COUNT(o.order_id) AS total_orders
FROM order_items AS o
JOIN products AS p
	ON p.product_id = o.product_id 
WHERE p."product category" IS NOT NULL
GROUP BY p."product category"
ORDER BY total_orders DESC

-- 4. Calculate the percentage of orders that were paid in installments.

SELECT DISTINCT payment_installments,
		ROUND(COUNT(payment_installments) * 100.0 / (SELECT COUNT(payment_installments)
														FROM payments
														WHERE payment_installments > 1 ) 	:: NUMERIC ,3 ) AS payment_percentage 
FROM payments
WHERE payment_installments > 1
GROUP BY payment_installments

-- 5. Count the number of customers from each state. 


SELECT geolocation_state, COUNT(DISTINCT geolocation_zip_code_prefix) AS cutotal_customers 
FROM geolocation
GROUP BY geolocation_state
ORDER BY cutotal_customers DESC

-- Intermediate Queries
-- 1. Calculate the number of orders per month in 2018.

SELECT  
  EXTRACT(MONTH FROM order_purchase_timestamp::DATE) AS month_no,
  INITCAP(TO_CHAR(order_purchase_timestamp::DATE, 'Month')) AS order_month,
  COUNT(order_id) AS total_orders
FROM orders
WHERE order_purchase_timestamp::DATE 
      BETWEEN '2018-01-01' AND '2018-12-31'
GROUP BY month_no, order_month
ORDER BY month_no;

-- 2. Find the average number of products per order, grouped by customer city.

SELECT DISTINCT (c.customer_city), ROUND(AVG(oi.order_item_id):: NUMERIC,2) AS avg_order
FROM orders AS o
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN customers AS c
ON c.customer_id = o.customer_id 
WHERE c.customer_city IS NOT NULL
GROUP BY c.customer_city 
ORDER BY avg_order DESC

-- 3. Calculate the percentage of total revenue contributed by each product category.

SELECT  
  p."product category", 
  ROUND(SUM(pa.payment_value):: NUMERIC ,2) AS total_amount,
  ROUND((SUM(pa.payment_value) * 100.0 / (SELECT SUM(payment_value) 
  											FROM payments))::NUMERIC, 2) AS payment_percentage
FROM payments AS pa
JOIN order_items AS oi 
  ON pa.order_id = oi.order_id
JOIN products AS p
  ON p.product_id = oi.product_id
GROUP BY p."product category"
ORDER BY total_amount DESC;

-- 4. Identify the correlation between product price and the number of times a product has been purchased.

SELECT CORR(price, total_order) AS 	price_order_correlation
FROM (
	SELECT DISTINCT product_id , price , COUNT(order_id) AS total_order
	FROM order_items 
	GROUP BY product_id, price
	ORDER BY  total_order DESC )AS x

"""
ðŸ“Š What is Correlation?
Correlation is a statistical measure that shows how two variables move in relation to each other.

Do they increase together?

Does one go up while the other goes down?

Or are they completely unrelated?

ðŸ§  Simple Explanation:
Price (â‚¹)	Orders
100	500
200	400
300	200

As price increases, orders decrease â†’ This is a negative correlation.

âœ… Examples:
Case	Correlation
Hours studied â†‘, marks â†‘	Positive
Product price â†‘, sales â†“	Negative
Shoe size vs intelligence	No relation (0)

ðŸ“ˆ Use Case in E-Commerce (Like Zepto):
Product price vs number of purchases

Discount % vs sales volume

Weight vs delivery cost

These help answer:

"Do cheaper products sell more?"
"Is higher discount always better?"

SELECT CORR(price, total_order) FROM your_table; ---------------------

"""

-- 5. Calculate the total revenue generated by each seller, and rank them by revenue.

SELECT *,
RANK() OVER(ORDER BY total_revenue DESC) AS ranking
FROM (
	SELECT DISTINCT s.seller_id, ROUND(SUM(oi.price):: NUMERIC ,2) AS total_revenue
	FROM sellers AS s
	JOIN order_items AS oi 
	ON s.seller_id = oi.seller_id 
	GROUP BY s.seller_id
	ORDER BY total_revenue DESC ) AS x
	
-- Advanced Queries
-- 1. Calculate the moving average of order values for each customer over their order history.
	
SELECT 
  c.customer_id, 
  o.order_id,
  o.order_purchase_timestamp,
  ROUND((oi.price + oi.freight_value)::NUMERIC, 2) AS order_value,
  ROUND((
    AVG(oi.price + oi.freight_value) 
    OVER (
      PARTITION BY c.customer_id 
      ORDER BY o.order_purchase_timestamp 
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    )
  )::NUMERIC, 2) AS moving_avg_order_value
FROM customers AS c
JOIN orders AS o 
ON c.customer_id = o.customer_id
JOIN order_items AS oi 
ON o.order_id = oi.order_id
ORDER BY c.customer_id, o.order_purchase_timestamp

-- 2. Calculate the cumulative sales per month for each year.

SELECT *,
SUM(total_sales) OVER(PARTITION BY year ORDER BY month_no) AS cumulative_sales
FROM (
	SELECT  EXTRACT(YEAR FROM order_purchase_timestamp::DATE) AS year,
			EXTRACT(MONTH FROM order_purchase_timestamp::DATE)AS Month_no,
			TO_CHAR(order_purchase_timestamp::DATE, 'month') AS order_month,
			ROUND(SUM(oi.price):: NUMERIC ,2) AS total_sales 
	FROM orders AS o
	JOIN order_items AS oi
	ON o.order_id = oi.order_id
	GROUP BY year, month_no, order_month ) AS x
	
-- 3. Calculate the year-over-year growth rate of total sales.

SELECT  EXTRACT(YEAR FROM order_purchase_timestamp::DATE) AS year, 
		ROUND(SUM(oi.price):: NUMERIC ,2) AS total_revenue,
		ROUND((SUM(price) * 100 / ( SELECT SUM(price)
								FROM order_items )):: NUMERIC ,2) AS growth_percentage
FROM orders AS o
JOIN order_items AS oi
ON oi.order_id = o.order_id 
GROUP BY year
ORDER BY year

-- 4. Calculate the retention rate of customers, defined as the percentage of customers 
--     who make another purchase within 6 months of their first purchase.

SELECT customer_id, SUM(total_order_permonth) AS orders 
FROM (
	SELECT EXTRACT(MONTH FROM order_purchase_timestamp:: DATE) AS month_no,
			TO_CHAR(order_purchase_timestamP::DATE, 'Month') AS order_month, order_purchase_timestamP::DATE, 
			customer_id, COUNT(order_id) AS total_order_perMonth
	FROM orders
	WHERE order_purchase_timestamp::DATE >='2018-10-17'::DATE - INTERVAL '6 Month'
	GROUP BY month_no, order_month, customer_id, order_purchase_timestamP::DATE ) AS x
GROUP BY customer_id
HAVING SUM(total_order_permonth) > 1
ORDER BY orders DESC 

-- 5. Identify the top 3 customers who spent the most money in each year.

SELECT year, customer_id, total_amount, ranking
FROM (
	SELECT *,
	RANK() OVER(PARTITION BY year ORDER BY total_amount DESC) AS ranking
	FROM (
		SELECT EXTRACT(YEAR FROM order_purchase_timestamp::DATE) AS year, customer_id, 
				SUM(p.payment_value) AS total_amount
		FROM orders AS o
		JOIN payments AS p
		ON p.order_id = o.order_id 
		GROUP BY year, customer_id  ) AS x ) AS y
WHERE ranking <= 3
ORDER BY year , total_amount DESC 
